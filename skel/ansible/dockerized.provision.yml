---
#
# best to avoid customizations on these while we iron it out.
#

- name: "localhost - dockerized environment provisioning"
  hosts: 127.0.0.1
  connection: local
  gather_facts: no
  tasks:

    - name: create inventory group based on DOCKER_MACHINE name
      group_by: key={{ DOCKER_MACHINE }}

    - name: fail to provision on local environments - use alternative palybook
      fail: msg="not supported on local environments - use alt local playbook"
      when: DOCKER_MACHINE == 'local'

    - name: ensure containers are running on docker-machine
      local_action: shell ./bin/env up {{ ENV }}
      args:
        chdir: "{{ LOCAL_ROOT }}"
      run_once: True
      tags:
        - start-containers

    - name: sleeping 10s while containers come online...
      pause: seconds=10

# placeholder for running commands against the docker-machine
#  useful for UFS/volume setup.

# - name: "docker-machine - qa environment provisioning"
#   hosts: docker-machine
#   tasks:
#
#     - name: copy SQL_FILE to docker-machine if SQL_FILE extravar has been passed.
#       copy:
#         src: "{{ SQL_FILE }}"
#         dest: "/tmp/${ENV}-${CLIENT_CODE}-{{ SQL_FILE | basename }}"
#       when: SQL_FILE is definied
#       tags:
#         - db

#
# seed docker-machine with /nfs snapshots -- e.g. used for seeding ocean-
#  environments that don't already have /nfs available
#

- name: "docker-machine - seed machine with /nfs snapshots"
  hosts: ocean-*
  gather_facts: no
  vars:
    SNAPSHOT_PATH: "/nfs/snapshots/clients/{{ SNAPSHOT_BASE_CLIENT | default(CLIENT_CODE) }}/{{ SNAPSHOT_BASE_ENV }}"
    SNAPSHOT_DB_PATH: "{{ SNAPSHOT_PATH }}/{{ SNAPSHOT_BASE_CLIENT | default(CLIENT_CODE) }}-{{ SNAPSHOT_BASE_ENV }}.database.sql.gz"
    SNAPSHOT_MEDIA_PATH: "{{ SNAPSHOT_PATH }}/media/"
  tags:
    - seed-snapshots
  tasks:
    - block:
      - name: ensure we have /nfs targets available locally
        local_action: stat path={{ SNAPSHOT_PATH }}
        register: local_nfs
      - fail: msg="{{ SNAPSHOT_PATH }} is missing from the ansible host"
        when: not local_nfs.stat.exists

      - name: "synchronize database from {{ SNAPSHOT_DB_PATH }}"
        synchronize:
          src: "{{ SNAPSHOT_DB_PATH }}"
          dest: "{{ SNAPSHOT_DB_PATH }}"
        tags:
          - seed-snapshots-db-only
        when: SQL_FILE is undefined or not SQL_FILE

      - name: "synchronize media from {{ SNAPSHOT_MEDIA_PATH }}"
        synchronize:
          src: "{{ SNAPSHOT_MEDIA_PATH }}"
          dest: "{{ SNAPSHOT_MEDIA_PATH }}"
          copy_links: yes
          archive: no
          recursive: yes
          delete: yes
        tags:
          - seed-snapshots-media-only

      when: SQL_FILE is undefined or not SQL_FILE

- name: "term-container - database import"
  hosts: term-container
  vars:
    # force import will overwrite existing db
    FORCE_IMPORT: false
    SNAPSHOT_PATH: "/nfs/snapshots/clients/{{ SNAPSHOT_BASE_CLIENT | default(CLIENT_CODE) }}/{{ SNAPSHOT_BASE_ENV }}"
    SNAPSHOT_DB_PATH: "{{ SNAPSHOT_PATH }}/{{ SNAPSHOT_BASE_CLIENT | default(CLIENT_CODE) }}-{{ SNAPSHOT_BASE_ENV }}.database.sql.gz"
    SNAPSHOT_MEDIA_PATH: "{{ SNAPSHOT_PATH }}/media/"
  tags:
    - db-import

  tasks:
    - name: check for presence of core_config_data table
      shell: echo "SELECT COUNT(1) FROM core_config_data;" | mysql
      register: result
      ignore_errors: True

    - name: copy SQL_FILE if SQL_FILE extravar has been passed. It must be gzipped compressed .sql.gz!!!
      copy:
        src: "{{ SQL_FILE }}"
        dest: "/tmp/sql.gz"
      when: SQL_FILE is defined

    - set_fact:
        SNAPSHOT_DB_PATH: "/tmp/sql.gz"
      when: SQL_FILE is defined

    - name: import database - uncompress to /tmp/db.sql
      shell: zcat {{ SNAPSHOT_DB_PATH }} > /tmp/db.sql
      when: result|failed or FORCE_IMPORT

    - name: import database - source /tmp/db.sql into mysql
      shell: mysql -e "SET autocommit=0; SET unique_checks=0; SET foreign_key_checks=0; source /tmp/db.sql; COMMIT; SET unique_checks=1; SET foreign_key_checks=1;"
      when: result|failed or FORCE_IMPORT

    - name: import mysql database - remove /tmp/db.sql
      file: state=absent path=/tmp/db.sql
      when: result|failed or FORCE_IMPORT

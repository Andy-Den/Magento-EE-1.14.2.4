<?php
/**
 * Magento Enterprise Edition
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magento Enterprise Edition End User License Agreement
 * that is bundled with this package in the file LICENSE_EE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.magento.com/license/enterprise-edition
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    design
 * @package     rwd_default
 * @copyright Copyright (c) 2006-2017 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license http://www.magento.com/license/enterprise-edition
 */
?>

<?php
$_product    = $this->getProduct();
$_attributes = Mage::helper('core')->decorateArray($this->getAllowAttributes());
$_jsonConfig = $this->getJsonConfig();
$_renderers = $this->getChild('attr_renderers')->getSortedChildren();
?>
<?php if ($_product->isSaleable() && count($_attributes)):?>
    <dl>
    <?php foreach($_attributes as $_attribute): ?>
        <?php
        $_rendered = false;
        foreach ($_renderers as $_rendererName):
            $_renderer = $this->getChild('attr_renderers')->getChild($_rendererName);
            if (method_exists($_renderer, 'shouldRender') && $_renderer->shouldRender($_attribute, $_jsonConfig)):
                $_renderer->setProduct($_product);
                $_renderer->setAttributeObj($_attribute);
                echo $_renderer->toHtml();
                $_rendered = true;
                break;
            endif;
        endforeach;

        if (!$_rendered):
        ?>
        <dt><label class="required"><em>*</em><?php echo $_attribute->getLabel() ?></label></dt>
        <dd<?php if ($_attribute->decoratedIsLast){?> class="last"<?php }?>>
            <div class="input-box">
                <select name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" class="required-entry super-attribute-select">
                    <option><?php echo $this->__('Choose an Option...') ?></option>
                  </select>
              </div>
        </dd>
        <?php endif; ?>
    <?php endforeach; ?>
    </dl>
    <script type="text/javascript">
        Product.Config.prototype.loadOptions = function() {
            this.settings.each(function(element){
                element.disabled = false;
                var attributeId = element.id.replace(/[a-z]*/, '');
                var chooseLabel = 'SELECT ' + this.config.attributes[attributeId].label.toUpperCase();
                element.options[0] = new Option(chooseLabel, '');
                var options = this.getAttributeOptions(attributeId); 
                if(options) {
                    var index = 1;
                    for(var i=0;i<options.length;i++){
                        options[i].allowedProducts = options[i].products.clone();
                        element.options[index] = new Option(this.getOptionLabel(options[i], options[i].price), options[i].id);
                        if (typeof options[i].price != 'undefined') {
                            element.options[index].setAttribute('price', options[i].price);
                        }
                        element.options[index].setAttribute('data-label', options[i].label.toLowerCase());
                        element.options[index].config = options[i];
                        index++;
                    }
                }
                this.reloadOptionLabels(element);
            }.bind(this));
        };
        var spConfig = new Product.Config(<?php echo $_jsonConfig ?>);

        // Gets ID of selected simple product of parent configerable product for MAP pricing email
        spConfig.getIdOfSelectedProduct = function () {
            var existingProducts = new Object();
            for (var i = this.settings.length - 1; i >= 0; i--) {
                var selected = this.settings[i].options[this.settings[i].selectedIndex];
                if (selected.config) {
                    for (var iproducts = 0; iproducts < selected.config.products.length; iproducts++) {
                        var usedAsKey = selected.config.products[iproducts] + "";
                        if (undefined == existingProducts[usedAsKey]) {
                            existingProducts[usedAsKey] = 1;
                        } else {
                            existingProducts[usedAsKey] = existingProducts[usedAsKey] + 1;
                        }
                    }
                }
            }
            for (var keyValue in existingProducts) {
                for (var keyValueInner in existingProducts) {
                    if (Number(existingProducts[keyValueInner]) < Number(existingProducts[keyValue])) {
                        delete existingProducts[keyValueInner];
                    }
                }
            }
            var sizeOfExistingProducts = 0;
            var currentSimpleProductId = "";
            for (var keyValue in existingProducts) {
                currentSimpleProductId = keyValue;
                sizeOfExistingProducts = sizeOfExistingProducts + 1
            }
            if (sizeOfExistingProducts == 1) {
                return currentSimpleProductId;
            }
        }
    </script>
    <?php echo $this->getChildHtml('after') ?>
<?php endif;?>

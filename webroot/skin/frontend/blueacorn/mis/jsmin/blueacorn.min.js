function BlueAcornCore(options) {
    this.init(options);
}

BlueAcornCore.prototype = {
    init: function(options) {
        this.settings = {
            debug: false,
            moduleName: "BlueAcornCore"
        };
        this.overrideSettings(this.settings, options);
        if (this.settings.debug === true) {
            this.setupDebugging(this.settings);
        }
    },
    overrideSettings: function(settings, options) {
        if (typeof options === "object") {
            settings = jQuery.extend(settings, options);
        }
    },
    setupDebugging: function(moduleSettings) {
        if (typeof moduleSettings === "object") {
            this.watchConsole(moduleSettings.moduleName + " Loaded!!!");
            this.watchConsole(moduleSettings);
        }
    },
    watchConsole: function(message) {
        console.log(message);
    }
};

var ba = new BlueAcornCore({
    debug: mageConfig["styleguide/development/enable_development"] > 0 ? true : false
});

function BlueAcornGlobal() {
    this.init();
}

jQuery(document).ready(function($) {
    BlueAcornGlobal.prototype = {
        init: function() {
            var self = this;
            self.bp = 650;
            self.setupObservers();
            self.setupFooter();
        },
        setupObservers: function() {
            this.moveMobileNavigation();
        },
        moveMobileNavigation: function() {
            var self = this;
            enquire.register("screen and (max-width:" + bp.medium + "px)", {
                match: function() {
                    $(".logo").after($("#header-nav"));
                    $("#header-nav").prepend($(".store-phone"));
                },
                unmatch: function() {
                    $(".skip-links").after($("#header-nav"));
                    $(".account-cart-wrapper").prepend($(".store-phone"));
                }
            });
        },
        setupFooter: function() {
            var self = this;
            self.flagSet = false;
            self.checkForWidth(self.flagSet);
            $(window).resize(function() {
                self.checkForWidth(self.flagSet);
            });
        },
        checkForWidth: function(flagSet) {
            var self = this;
            if ($(window).innerWidth() <= self.bp && flagSet === false) {
                self.setupAccordion();
                self.flagSet = true;
            }
        },
        setupAccordion: function() {
            $(".footer .links h5").on("click", function() {
                $(this).toggleClass("open-links");
            });
        }
    };
    ba.Global = new BlueAcornGlobal();
});

function BlueAcornHomepage() {
    this.init();
}

jQuery(document).ready(function($) {
    BlueAcornHomepage.prototype = {
        init: function() {
            var self = this;
            self.setupObservers();
        },
        setupObservers: function() {
            var self = this;
            self.minHeightFeaturedProducts();
            $(window).resize(function() {
                self.minHeightFeaturedProducts();
            });
        },
        minHeightFeaturedProducts: function() {
            var self = this;
            self.minHeight = 426;
            $(".feature-item").css("min-height", "");
            $(".feature-item").each(function() {
                var itemHeight = $(this).outerHeight();
                if (itemHeight > self.minHeight) {
                    self.minHeight = itemHeight;
                }
            });
            $(".feature-item").css("min-height", self.minHeight);
        }
    };
    if ($("body").hasClass("cms-index-index")) {
        ba.Homepage = new BlueAcornHomepage();
    }
});

function CustomFormElements(options) {
    this.init(options);
}

jQuery(document).ready(function($) {
    CustomFormElements.prototype = {
        init: function(options) {
            this.settings = {
                moduleName: "CustomFormElements",
                superSelects: false,
                blackList: [ ".no-style" ]
            };
            ba.overrideSettings(this.settings, options);
            ba.setupDebugging(this.settings);
            this.setObservers();
            this.updateAll();
        },
        setObservers: function() {
            var self = this;
            $(document).on("update:radios", function() {
                self.customRadios();
                self.unsetCustom();
            });
            $(document).on("update:checkboxes", function() {
                self.customCheckboxes();
                self.unsetCustom();
            });
            $(document).on("section:update", this.updateAll.bind(this));
            $(document).on("update:inputs", this.updateAll.bind(this));
            if (!this.settings.superSelects) {
                $(document).on("update:selects", function() {
                    self.updateSelects();
                    self.updateShivs();
                    self.unsetCustom();
                });
                $(window).on("resize", function() {
                    self.updateSelects();
                    self.unsetCustom();
                });
            }
        },
        updateAll: function() {
            this.customRadios();
            this.customCheckboxes();
            if (!this.settings.superSelects) {
                this.customSelects();
                this.updateShivs();
            }
            this.unsetCustom();
        },
        getLabel: function(el) {
            var elementLabel;
            if ($(el).siblings("label, span.label").length) {
                elementLabel = $(el).siblings("label, span.label").first();
            } else if ($(el).parent().siblings("label, span.label").length) {
                elementLabel = $(el).parent().siblings("label, span.label").first();
            } else if ($(el).parent("label").length) {
                elementLabel = $(el).parent("label");
            } else {
                $(el).after('<label for="' + $(el).attr("id") + '"></label>');
                elementLabel = $(el).siblings("label");
            }
            return elementLabel;
        },
        getLabelType: function(el) {
            var labelType = "label";
            if ($(el).siblings("span.label").length || $(el).parent().siblings("span.label").length) {
                labelType = "span";
            }
            return labelType;
        },
        resetLabels: function(el, type) {
            $(el).removeClass(type + " disabled checked");
        },
        setProperties: function(labelElement, labelInput, prop) {
            if ($(labelInput).prop(prop) && labelElement) {
                $(labelElement).addClass(prop);
            }
        },
        getLabelInput: function(labelType, labelElement) {
            var labelFor, labelInput;
            if (labelType === "label") {
                labelFor = $(labelElement).attr("for");
                if (labelFor.indexOf(":") != "-1") {
                    labelFor = labelFor.replace(":", "\\:");
                }
                labelInput = $("#" + labelFor + ', input[name="' + labelFor + '"]');
            } else {
                labelInput = $(labelElement).siblings("input");
            }
            return labelInput;
        },
        customRadios: function() {
            var radioElements = $('input[type="radio"].radio'), self = this;
            if ($(radioElements).length > 0) {
                $(radioElements).each(function(idx, el) {
                    var radioLabel, labelType;
                    radioLabel = self.getLabel(el);
                    labelType = self.getLabelType(el);
                    this.resetLabels(radioLabel, "radio-label");
                    this.setProperties(radioLabel, el, "checked");
                    this.setProperties(radioLabel, el, "disabled");
                    if (radioLabel) {
                        $(radioLabel).addClass("radio-label");
                        $(el).addClass("input-custom");
                        $(radioLabel).on("click", function(event) {
                            event.stopPropagation();
                            event.preventDefault();
                            var labelRadio = $(event.target).closest(labelType), radioInput = this.getLabelInput(labelType, labelRadio), groupRadio = $(radioInput).attr("name");
                            if (!$(radioInput).prop("disabled")) {
                                this.updateRadioGroup(groupRadio, labelType);
                                $(radioInput).prop("checked", true);
                                $(labelRadio).addClass("checked");
                            }
                            if ($(radioInput).attr("onclick")) {
                                $(radioInput).trigger("click");
                            }
                        }.bind(this));
                    }
                }.bind(this));
            }
        },
        updateRadioGroup: function(group, labelType) {
            $('input[name="' + group + '"]').each(function(idx, el) {
                $(el).prop("checked", false);
                $(el).siblings(labelType).removeClass("checked");
                if ($(el).parent("label").length > 0) {
                    $(el).parent("label").removeClass("checked");
                }
            });
        },
        customCheckboxes: function() {
            var self = this, checkboxElements = $('input[type="checkbox"].checkbox');
            if ($(checkboxElements).length > 0) {
                $(checkboxElements).each(function(idx, el) {
                    var checkboxLabel, labelType;
                    checkboxLabel = self.getLabel(el);
                    labelType = self.getLabelType(el);
                    this.resetLabels(checkboxLabel, "checkbox-label");
                    this.setProperties(checkboxLabel, el, "checked");
                    this.setProperties(checkboxLabel, el, "disabled");
                    if (checkboxLabel) {
                        $(checkboxLabel).addClass("checkbox-label");
                        $(el).addClass("input-custom");
                        $(checkboxLabel).off("click").on("click", function(event) {
                            event.stopPropagation();
                            event.preventDefault();
                            var labelCheckbox = $(event.target).closest(labelType), checkboxInput = this.getLabelInput(labelType, labelCheckbox);
                            if ($(checkboxInput).prop("checked")) {
                                $(labelCheckbox).removeClass("checked");
                                $(checkboxInput).prop("checked", false);
                            } else {
                                $(labelCheckbox).addClass("checked");
                                $(checkboxInput).prop("checked", true);
                            }
                            if ($(checkboxInput).attr("onclick")) {
                                $(checkboxInput)[0].onclick.apply($(checkboxInput)[0]);
                            }
                        }.bind(this));
                    }
                }.bind(this));
            }
        },
        customSelectsBefore: function() {
            var smallSelects = $("#select-language, .toolbar select, .review-heading .pager select, .review-customer-index .pager select, .small-select");
            $(smallSelects).addClass("sm");
        },
        customSelects: function() {
            this.customSelectsBefore();
            var selectElements = $("select"), selectTruncate = 36;
            if ($(selectElements).length > 0) {
                $(selectElements).each(function(idx, el) {
                    var selectTitle, selectedOptions;
                    if ($(el).parent(".select-container").length > 0 || $(el).prop("multiple")) {
                        return;
                    }
                    if ($(el).attr("title")) {
                        selectTitle = $(el).attr("title").strip().truncate(selectTruncate);
                    }
                    $(el).addClass("select-custom").data("truncate", selectTruncate);
                    if ($(el).prev().length > 0 && (!$(el).parent().hasClass("input-box") || !$(el).parent().hasClass("v-fix"))) {
                        $(el).wrap('<div class="input-box"></div>');
                    }
                    $(el).parent().addClass("select-container");
                    if ($(el).prop("disabled")) {
                        $(el).parent().addClass("disabled");
                    } else {
                        $(el).parent().removeClass("disabled");
                    }
                    if ($(el).hasClass("sm")) {
                        $(el).parent().addClass("small");
                    }
                    selectTitle = $(el).children().first().html().strip().truncate(selectTruncate);
                    selectedOptions = $(el).children("option:selected").text();
                    if (selectedOptions.length > 0) {
                        selectTitle = selectedOptions.strip().truncate(selectTruncate);
                    }
                    if ($(el).siblings(".custom-shiv").length === 0) {
                        var selectSize = "";
                        $(el).before('<span class="custom-shiv">' + selectTitle + "<span></span></span>");
                    }
                    $(el).on("change", this.updateShivs.bind(this));
                    $(el).on("mouseover", function() {
                        $(el).siblings(".custom-shiv").addClass("hover");
                    });
                    $(el).on("mouseout", function() {
                        $(el).siblings(".custom-shiv").removeClass("hover");
                    });
                    this.updateSelects();
                }.bind(this));
            }
        },
        updateShivs: function() {
            var selectShivs = $(".custom-shiv");
            $(selectShivs).each(function() {
                var selectElement, optionValue, truncateOption;
                selectElement = $(this).siblings("select");
                optionValue = $(selectElement).children("option:selected").text();
                truncateOption = $(selectElement).data("truncate");
                $(this).html(optionValue.strip().truncate(truncateOption) + "<span></span>");
            });
        },
        updateSelects: function() {
            var selectShivs = $(".custom-shiv");
            $(selectShivs).each(function() {
                if ($(this).siblings("select").css("display") === "none") {
                    $(this).css("display", "none");
                } else {
                    $(this).css("display", "");
                }
                $(this).parent(".select-container").removeClass("disabled");
                if ($(this).siblings("select").prop("disabled")) {
                    $(this).parent(".select-container").addClass("disabled");
                }
            });
        },
        unsetCustom: function() {
            var self = this;
            $.each(self.settings.blackList, function(idx, listItem) {
                $.each($(listItem), function(idx, el) {
                    if ($(el).prop("tagName") == "SELECT") {
                        self.unsetCustomSelect(el);
                    } else {
                        self.unsetCustomInput(el);
                    }
                });
            });
        },
        unsetCustomSelect: function(el) {
            $(el).parent(".select-container").removeClass("select-container");
            $(el).removeClass("custom-select select-custom disabled");
            $(el).siblings(".custom-shiv").remove();
        },
        unsetCustomInput: function(el) {
            $(el).removeClass("input-custom");
            if ($(el).siblings(".radio-label, .checkbox-label").length > 0) {
                $(el).siblings(".radio-label, .checkbox-label").removeClass("radio-label checkbox-label");
            } else if ($(el).parent().siblings(".radio-label, .checkbox-label").length > 0) {
                $(el).parent().siblings(".radio-label, .checkbox-label").removeClass("radio-label checkbox-label");
            }
        }
    };
    ba.CustomFormElements = new CustomFormElements({});
});

Event.observe(window, "load", function() {
    if (typeof Product !== "undefined") {
        if (typeof Product.Config !== "undefined") {
            Product.Config.prototype.resetChildren = Product.Config.prototype.resetChildren.wrap(function(parentFunction, element) {
                parentFunction(element);
                jQuery(document).trigger("update:selects");
            });
            Product.Config.prototype.configureForValues = Product.Config.prototype.configureForValues.wrap(function(parentFunction) {
                parentFunction();
                this.settings.each(function(element) {
                    jQuery(element).on("change", this.configure.bind(this));
                }.bind(this));
            });
            Product.Config.prototype.configureElement = Product.Config.prototype.configureElement.wrap(function(parentFunction, element) {
                parentFunction(element);
                jQuery(document).trigger("update:selects");
            });
        }
    }
    if (typeof Product !== "undefined") {
        if (typeof Product.Bundle !== "undefined") {
            Product.Bundle.prototype.changeSelection = Product.Bundle.prototype.changeSelection.wrap(function(parentFunction, selection) {
                parentFunction(selection);
                jQuery(document).trigger("update:inputs");
            });
        }
    }
    if ($$(".catalog-product-view").length > 0 && typeof Enterprise !== "undefined") {
        if (typeof Enterprise.Bundle !== "undefined") {
            Enterprise.Bundle.selection = Enterprise.Bundle.selection.wrap(function(parentFunction, optionId, selectionId) {
                parentFunction(optionId, selectionId);
                jQuery(document).trigger("update:inputs");
            });
        }
    }
    if (typeof Validation !== "undefined") {
        Validation.prototype.initialize = Validation.prototype.initialize.wrap(function(parentFunction, form, options) {
            parentFunction(form, options);
            if (this.options.immediate) {
                Form.getElements(this.form).each(function(input) {
                    if (input.tagName.toLowerCase() == "select") {
                        jQuery(input).on("custom:blur", Validation.validate(this));
                    }
                }, this);
            }
        });
    }
    if (typeof Checkout !== "undefined") {
        Checkout.prototype.gotoSection = Checkout.prototype.gotoSection.wrap(function(parentFunction, section, reloadProgressBlock) {
            parentFunction(section, reloadProgressBlock);
            jQuery(document).trigger("section:update");
            jQuery(document).trigger("section:" + section);
            if (this.currentStep === "shipping_method") {
                window.setTimeout(function() {
                    jQuery(document).trigger("section:update");
                }, 100);
            }
        });
    }
    if (typeof payment !== "undefined") {
        jQuery('label[for="use_customer_balance"]').on("click", function() {
            payment.switchCustomerBalanceCheckbox();
        });
    }
    if (typeof Shipping !== "undefined") {
        Shipping.prototype.syncWithBilling = Shipping.prototype.syncWithBilling.wrap(function(parentFunction) {
            parentFunction();
            jQuery(document).trigger("update:selects");
        });
        Shipping.prototype.nextStep = Shipping.prototype.nextStep.wrap(function(parentFunction, transport) {
            parentFunction(transport);
            jQuery(document).trigger("section:update");
        });
    }
    if (typeof shipping !== "undefined") {
        shipping.setSameAsBilling = shipping.setSameAsBilling.wrap(function(parentFunction, flag) {
            parentFunction(flag);
            jQuery(document).trigger("update:selects");
        });
        shipping.syncWithBilling = shipping.syncWithBilling.wrap(function(parentFunction) {
            parentFunction();
            jQuery(document).trigger("update:selects");
        });
    }
    if (typeof Billing !== "undefined") {
        Billing.prototype.nextStep = Billing.prototype.nextStep.wrap(function(parentFunction, transport) {
            parentFunction(transport);
            jQuery(document).trigger("section:update");
        });
    }
    if (typeof ShippingMethod !== "undefined") {
        ShippingMethod.prototype.nextStep = ShippingMethod.prototype.nextStep.wrap(function(parentFunction, transport) {
            parentFunction(transport);
            jQuery(document).trigger("section:update");
        });
    }
    if ($$(".related-checkbox").length > 0) {
        jQuery.each(jQuery(".related-checkbox"), function(idx, el) {
            if (jQuery(el).siblings("label, span.label").length === 0) {
                jQuery(el).after('<label for="' + jQuery(el).attr("name") + '"></label>');
                jQuery(document).trigger("update:checkboxes");
            }
        });
    }
    if (typeof ProductMediaManager !== "undefined") {
        ProductMediaManager.createZoom = ProductMediaManager.createZoom.wrap(function(parentFunction, image) {
            if ($$(".catalog-product-view").length) {
                parentFunction(image);
            }
        });
    }
}.bind(window));

(function() {
    if (typeof RegionUpdater !== "undefined") {
        RegionUpdater.prototype.update = RegionUpdater.prototype.update.wrap(function(parentFunction) {
            parentFunction();
            jQuery(document).trigger("update:selects");
        });
    }
})(jQuery);

if (typeof ba === "undefined") {
    var ba = {};
}

function productPage(options) {
    this.init(options);
}

jQuery(document).ready(function($) {
    productPage.prototype = {
        init: function(options) {
            this.settings = {
                moduleName: "productPage"
            };
            ba.overrideSettings(this.settings, options);
            ba.setupDebugging(this.settings);
            this.setDescriptionContainerMaxHeight();
            this.expandDescription();
        },
        setDescriptionContainerMaxHeight: function() {
            var self = this, wrapper = $(".description"), container = $(".detail"), divHeight = $(".specifications");
            container.css({
                "max-height": divHeight.height() - 95
            });
            if (container[0].scrollHeight > container.innerHeight()) {
                wrapper.append('<div class="read-more">Read More</div>');
                $(".read-more").css({
                    top: divHeight.height() + 35
                });
            }
        },
        expandDescription: function() {
            var self = this, readMore = $(".read-more"), container = $(".detail"), newHeight = $(".detail")[0].scrollHeight;
            readMore.on("click", function() {
                container.css({
                    "max-height": newHeight
                });
                readMore.detach();
            });
        }
    };
    ba.productPage = new productPage({});
});

function ResponsiveNotation(options) {
    this.init(options);
}

jQuery(document).ready(function($) {
    ResponsiveNotation.prototype = {
        init: function(options) {
            this.settings = {
                moduleName: "ResponsiveNotation",
                mobileClass: "resp-mobile",
                tabletClass: "resp-tablet",
                desktopClass: "resp-desktop"
            };
            ba.overrideSettings(this.settings, options);
            ba.setupDebugging(this.settings);
            $(document).trigger("rnote:loaded");
            this.setViewportClass();
        },
        setViewportClass: function() {
            var self = this;
            enquire.register("screen and (min-width:" + (bp.large + 1) + "px)", {
                match: function() {
                    $("html").addClass(self.settings.desktopClass);
                },
                unmatch: function() {
                    $("html").removeClass(self.settings.desktopClass);
                }
            }).register("screen and (min-width:" + (bp.small + 1) + "px) and (max-width:" + bp.large + "px)", {
                match: function() {
                    $("html").addClass(self.settings.tabletClass);
                },
                unmatch: function() {
                    $("html").removeClass(self.settings.tabletClass);
                }
            }).register("screen and (max-width:" + bp.small + "px)", {
                match: function() {
                    $("html").addClass(self.settings.mobileClass);
                },
                unmatch: function() {
                    $("html").removeClass(self.settings.mobileClass);
                }
            });
        }
    };
    ba.ResponsiveNotation = new ResponsiveNotation({});
});
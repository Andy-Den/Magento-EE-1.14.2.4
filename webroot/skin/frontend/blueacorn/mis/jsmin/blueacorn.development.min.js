var BlueAcornDevelopmentCore = {
    entityMap: {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "/": "&#x2F;"
    },
    escapeHtmlString: function(string) {
        var self = this;
        return String(string).replace(/[&<>"'\/]/g, function(s) {
            return ba.entityMap[s];
        });
    }
};

ba = jQuery.extend(ba, BlueAcornDevelopmentCore);

function GridPreview(options) {
    this.init(options);
}

jQuery(document).ready(function($) {
    GridPreview.prototype = {
        init: function(options) {
            this.settings = {
                moduleName: "GridPreview"
            };
            ba.overrideSettings(this.settings, options);
            ba.setupDebugging(this.settings);
            this.gridVisible = false;
            this.setupObserver();
            this.setupGrid();
        },
        setupObserver: function() {
            var self = this;
            $(window).on("keypress", function(event) {
                var targetTag = event.target.tagName.toLowerCase();
                if (event.keyCode == 103 && targetTag != "input" && targetTag != "textarea") {
                    if (self.gridVisible) {
                        self.hideGrid();
                    } else {
                        self.showGrid();
                    }
                }
            });
        },
        setupGrid: function() {
            this.gridTemplate = [ '<div id="grid">', '<div class="mobile"><div class="m-1">m-1</div><div class="m-2">m-2</div><div class="m-3">m-3</div><div class="m-4">m-4</div><div class="m-5">m-5</div><div class="m-6">m-6</div></div>', '<div class="tablet"><div class="t-1">t-1</div><div class="t-2">t-2</div><div class="t-3">t-3</div><div class="t-4">t-4</div><div class="t-5">t-5</div><div class="t-6">t-6</div><div class="t-7">t-7</div><div class="t-8">t-8</div></div>', '<div class="desktop"><div class="d-1">d-1</div><div class="d-2">d-2</div><div class="d-3">d-3</div><div class="d-4">d-4</div><div class="d-5">d-5</div><div class="d-6">d-6</div><div class="d-7">d-7</div><div class="d-8">d-8</div></div>', "</div>" ].join("");
        },
        showGrid: function() {
            this.gridVisible = true;
            $(".page-header").before(this.gridTemplate);
        },
        hideGrid: function() {
            $("#grid").remove();
            this.gridVisible = false;
        }
    };
    ba.GridPreview = new GridPreview({});
});

function StyleGuideMenu(options) {
    this.init(options);
}

jQuery(document).ready(function($) {
    StyleGuideMenu.prototype = {
        init: function(options) {
            this.settings = {
                moduleName: "StyleGuideMenu"
            };
            ba.overrideSettings(this.settings, options);
            ba.setupDebugging(this.settings);
            this.buildMenu();
            this.setSectionDisplays();
            this.setMenuObservers();
        },
        buildMenu: function() {
            var self = this;
            self.buildSectionObject();
            $.each(self.sections, function(idx, currentSection) {
                var sectionClass = self.getSectionStorage(idx) ? "active-section" : "";
                var sectionActive = self.getSectionStorage(idx) ? "checked" : "";
                var sectionSelector = '<li><input type="checkbox" class="checkbox ' + sectionClass + '"name="section' + idx + '" value="' + idx + '" ' + sectionActive + ' /><label for="section' + idx + '">' + currentSection.name + "</label></li>";
                $(".sg-menu-list").append(sectionSelector);
            });
            $(document).trigger("update:checkboxes");
            self.setObservers();
        },
        buildSectionObject: function() {
            var self = this;
            self.sections = [];
            $.each($(".col-main section"), function(idx, currentSection) {
                var section = {
                    name: $(currentSection).find("h3.sg-h").text(),
                    sectionElement: $(currentSection),
                    active: self.getSectionStorage(idx)
                };
                self.sections.push(section);
            });
        },
        setObservers: function() {
            var self = this;
            $(".sg-menu-list label").on("click", function(evt) {
                $(this).siblings("input").toggleClass("active-section");
                self.setSectionStorage();
                self.setSectionDisplays();
            });
            $(".sg-config-list label").on("click", function(evt) {
                $("body").toggleClass("code-active");
            });
        },
        getSectionStorage: function(idx) {
            if (Modernizr.localstorage) {
                if (localStorage.getItem("sgmenu")) {
                    return JSON.parse(localStorage.getItem("sgmenu"))[idx] ? true : false;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        },
        setSectionStorage: function() {
            var self = this;
            if (Modernizr.localstorage) {
                var sections = [];
                $.each(self.sections, function(id, el) {
                    sections.push($($(".sg-menu-list input")[id]).hasClass("active-section"));
                });
                localStorage.setItem("sgmenu", JSON.stringify(sections));
            }
        },
        setSectionDisplays: function() {
            var self = this;
            $.each(self.sections, function(idx, currentSection) {
                var sectionClass = "active-section";
                if (self.getSectionStorage(idx)) {
                    $(currentSection.sectionElement).addClass(sectionClass);
                } else {
                    $(currentSection.sectionElement).removeClass(sectionClass);
                }
            });
        },
        setMenuObservers: function() {
            var self = this;
            $(".sg-button").on("click", function(evt) {
                $(".sg-shiv").toggleClass("shiv-active");
                $(".sg-menu").toggleClass("menu-active");
                $(".sg-menu").css("margin-top", $(".sg-menu").height() / 2 - $(".sg-menu").height());
            });
        }
    };
    if ($(".cms-style-guide").length > 0) {
        ba.StyleGuideMenu = new StyleGuideMenu({});
    }
});

function StyleGuideColor(options) {
    this.init(options);
}

jQuery(document).ready(function($) {
    StyleGuideColor.prototype = {
        init: function(options) {
            this.settings = {
                moduleName: "StyleGuideColor"
            };
            this.css = [ {
                selector: ".sg-paragaphs p",
                attributes: [ "color", "font-size", "line-height", "font-family", "font-weight" ]
            }, {
                selector: ".sg-links a",
                attributes: [ "color", "font-size", "line-height", "font-family", "font-style", "font-weight" ]
            }, {
                selector: ".sg-strong strong",
                attributes: [ "color", "font-size", "line-height", "font-family", "font-weight" ]
            }, {
                selector: ".sg-emphasis em",
                attributes: [ "color", "font-size", "line-height", "font-family", "font-style" ]
            }, {
                selector: ".headings h1",
                attributes: [ "color", "font-size", "line-height", "margin-bottom", "font-family", "font-weight", "font-style" ]
            }, {
                selector: ".headings h2",
                attributes: [ "color", "font-size", "line-height", "margin-bottom", "font-family", "font-weight", "font-style" ]
            }, {
                selector: ".headings h3",
                attributes: [ "color", "font-size", "line-height", "margin-bottom", "font-family", "font-weight", "font-style" ]
            }, {
                selector: ".headings h4",
                attributes: [ "color", "font-size", "line-height", "margin-bottom", "font-family", "font-weight", "font-style" ]
            }, {
                selector: ".headings h5",
                attributes: [ "color", "font-size", "line-height", "margin-bottom", "font-family", "font-weight", "font-style" ]
            }, {
                selector: ".headings h6",
                attributes: [ "color", "font-size", "line-height", "margin-bottom", "font-family", "font-weight", "font-style" ]
            }, {
                selector: ".sg-button .button",
                attributes: [ "background-color", "background-image", "background-repeat", "background-position", "color", "font-size", "line-height", "height", "padding", "width" ]
            } ];
            ba.overrideSettings(this.settings, options);
            ba.setupDebugging(this.settings);
            this.setupCss();
            this.setupMarkup();
            Prism.highlightAll();
        },
        setupCss: function() {
            var self = this;
            $.each(self.css, function(idx, css) {
                self.setCodeCss(css.selector, css.attributes);
            });
        },
        getProperties: function(selector, attributes) {
            var self = this, propertyString = "";
            propertyString += $(selector).prop("tagName").toLowerCase() + self.getElementClassListString($(selector)) + " {\n";
            $.each(attributes, function(idx, prop) {
                if (prop === "color" || prop === "background-color" || prop === "border-color") {
                    propertyString += "    " + prop + ": " + self.getHexValue($(selector).css(prop)) + ";\n";
                } else {
                    propertyString += "    " + prop + ": " + $(selector).css(prop) + ";\n";
                }
            });
            propertyString += "}";
            return propertyString;
        },
        getElementClassListString: function(selector) {
            var self = this, classList = "";
            $.each($(selector).prop("classList"), function(idx, className) {
                classList += "." + className;
            });
            return classList;
        },
        hexCalculation: function(value) {
            var hexDigits = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");
            return isNaN(value) ? "00" : hexDigits[(value - value % 16) / 16] + hexDigits[value % 16];
        },
        getHexValue: function(rgbvalue) {
            var self = this, rgb = rgbvalue.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
            return "#" + self.hexCalculation(rgb[1]) + self.hexCalculation(rgb[2]) + self.hexCalculation(rgb[3]);
        },
        setCodeCss: function(selector, attributes) {
            var self = this;
            $.each($(selector), function(idx, currentElement) {
                var propertyString = self.getProperties(currentElement, attributes);
                $(currentElement).parent(".source").next(".code").append('<pre><code class="language-css">' + propertyString + "</code></pre>");
            });
        },
        setupMarkup: function() {
            var self = this;
            $.each($(".source"), function(idx) {
                var newString = ba.escapeHtmlString($(this).html());
                $(this).next(".code").find("code").append(newString);
            });
        }
    };
    if ($(".cms-style-guide").length > 0) {
        ba.StyleGuideColor = new StyleGuideColor({});
    }
});

function StyleGuide(options) {
    this.init(options);
}

jQuery(document).ready(function($) {
    StyleGuide.prototype = {
        init: function(options) {
            this.settings = {
                moduleName: "StyleGuide"
            };
            ba.overrideSettings(this.settings, options);
            ba.setupDebugging(this.settings);
            this.fixSidebarOnResize();
        },
        fixSidebarOnResize: function() {
            $(window).on("resize", function() {
                if ($(".main > .col-left.sidebar").length > 0) {
                    $(".main > .col-left.sidebar").remove();
                }
            });
        }
    };
    if ($(".cms-style-guide").length > 0) {
        ba.StyleGuide = new StyleGuide({});
    }
});